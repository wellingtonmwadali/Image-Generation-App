import React, { useState, useEffect } from 'react';
import {FormField, Loader, Card} from '../component'
// This is the home file responsible for the homepage"
const RenderCard = ({data, title}) => {
  if(data?.length > 0){
    return(data.map((post) => <Card key={post._id}{...post}/>)
  )}
  else
  return(
    <h2
    className='font-bold mt-1 text-lg uppercase'>
      {title}
    </h2>
  )
}
const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState(null)
  const [searchText, setSearchText] = useState("");
  const [searchedResults, setSearchedResults] = useState(null);
  const [searchTimeout, setSearchTimeout] = useState(null);

  const fetchPosts = async ()=>{
    setLoading(true);
    try{
        const response = await fetch("http://localhost:8080/api/v1/post",{
            method:"GET",
            headers:{
                'Content-Type':'application/json'

            },

        });
        if(response.ok){

            const result = await response.json();
            setAllPosts(result.data.reverse());
            console.log(result)
        }
    }catch(err){

    }
    finally{
        setLoading(false);
    }
}
useEffect(()=>{
    fetchPosts();
},[])

const handleSearchChange = (e) => {
  clearTimeout(searchTimeout);
  setSearchText(e.target.value);

  setSearchTimeout(
    setTimeout(() => {
      const searchResult = allPosts.filter((item) => item.name.toLowerCase().includes(searchText.toLowerCase()) 
      || item.prompt.toLowerCase().includes(searchText.toLowerCase()));
      setSearchedResults(searchResult);
    }, 500),
  );
};
  return (
    <section className='max-w-7xl mx-auto'>
      <div>
        <h1 className='mt-1 font-extrabold'>
          The Community Showcase
          </h1>
          <p>
            Browse through a collection of visually stunning images
            generated by DALLE AI 3.0
          </p>
      </div>
      <div className='mt-16'>
        <FormField
           labelName="Search Posts"
           type="text"
           name="text"
           placeholder="Search posts"
           value={searchText}
           handleChange={handleSearchChange}/>
      </div>
      <div
      className='mt-5'>
        {loading ? (<div className='flex justify-center items-center'>
        <Loader/>
        </div>
        ) : (
          <>
          {searchText && (
            <h2>Showing results for <span className='text-[#6469ff] italic font-bold'>{searchText}</span></h2>
          )}
          <div
          className='grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3'>
          {searchText ? (
            <RenderCard
            data = {searchedResults}
            title = "No search results found"
            />
          ): (
            <RenderCard
            data= {allPosts}
            title= "No posts found"/>
          )}
          </div>
          </>
        )}
      </div>
    </section>
  )
}

export default Home